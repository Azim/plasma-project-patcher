#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using BepInEx;
using BepInEx.Bootstrap;
using BepInEx.Logging;
using GameNetcodeStuff;
using HarmonyLib;
using UnityEngine;

public class BepInExPatcher: MonoBehaviour {
    private static string ActualGamePath => Path.Combine(UnityEditor.EditorPrefs.GetString("nomnom.lc_project_patcher.lc_data_folder"), "..", "Lethal Company.exe");
    private static string FakeExePath => Path.Combine(Application.dataPath, "..", "Lethal Company", "Lethal Company.exenot");
    private static string DirectoryPath => Path.GetDirectoryName(ActualGamePath);
    private static string GameDataPath => Path.Combine(DirectoryPath, "Lethal Company_Data");
    private static string ManagedPath => Path.Combine(GameDataPath, "Managed");

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
    private static void OnLoad() {
        ResetNetcodeRpcTables.ResetRpcFuncTable();
        
        var setExecutablePath = typeof(Paths).GetMethod("SetExecutablePath", BindingFlags.NonPublic | BindingFlags.Static);
        setExecutablePath.Invoke(null, new object[] {FakeExePath, null, null, null});
        
        // reset logger sources
        var sources = typeof(BepInEx.Logging.Logger).GetProperty("Sources", BindingFlags.Public | BindingFlags.Static);
        var sourcesValue = (ICollection<ILogSource>)sources.GetValue(null);
        sourcesValue.Clear();
        
        // reset _Listeners
        var listeners = typeof(BepInEx.Logging.Logger).GetField("_Listeners", BindingFlags.NonPublic | BindingFlags.Static);
        var listenersValue = (ICollection<ILogListener>)listeners.GetValue(null);
        listenersValue.Clear();
        
        // reset Chainloader._initialized
        var initialized = typeof(Chainloader).GetField("_initialized", BindingFlags.NonPublic | BindingFlags.Static);
        initialized.SetValue(null, false);
        
        // reset _loaded
        var loaded = typeof(Chainloader).GetField("_loaded", BindingFlags.NonPublic | BindingFlags.Static);
        loaded.SetValue(null, false);
        
        // reset internalLogsInitialized
        var internalLogsInitialized = typeof(BepInEx.Logging.Logger).GetField("internalLogsInitialized", BindingFlags.NonPublic | BindingFlags.Static);
        internalLogsInitialized.SetValue(null, false);
        
        // change UnityLogListener.WriteStringToUnityLog to debug log
        var writeStringToUnityLog = typeof(BepInEx.Logging.UnityLogListener).GetField("WriteStringToUnityLog", BindingFlags.NonPublic | BindingFlags.Static);
        writeStringToUnityLog.SetValue(null, new Action<string>(Debug.Log));
        
        var harmony = new Harmony("com.nomnom.test-bepinex");
        harmony.PatchAll(typeof(FindPluginTypesPatch));
        
        Chainloader.Initialize(FakeExePath, false);
        OverridePaths();
        // DebugPaths();
        
        Chainloader.Start();
        harmony.UnpatchSelf();
        
        Debug.Log("Loaded BepInEx!");
        
        var obj = new GameObject("CustomPlugin");
        obj.AddComponent<BepInExPatcher>();
        DontDestroyOnLoad(obj);
    }

    private static void OverridePaths() {
        // ExecutablePath
        var executablePathProperty = typeof(Paths).GetProperty("ExecutablePath");
        executablePathProperty.SetValue(null, ActualGamePath);
        
        // ManagedPath
        var managedPathProperty = typeof(Paths).GetProperty("ManagedPath");
        managedPathProperty.SetValue(null, ManagedPath);
        
        // DllSearchPaths
        var dllSearchPathsProperty = typeof(Paths).GetProperty("DllSearchPaths");
        dllSearchPathsProperty.SetValue(null, new string[] {ManagedPath});
    }

    private static void DebugPaths() {
        Debug.Log($"BepInExAssemblyDirectory: {Paths.BepInExAssemblyDirectory}");
        Debug.Log($"BepInExAssemblyPath: {Paths.BepInExAssemblyPath}");
        Debug.Log($"BepInExRootPath: {Paths.BepInExRootPath}");
        Debug.Log($"ExecutablePath: {Paths.ExecutablePath}");
        Debug.Log($"GameRootPath: {Paths.GameRootPath}");
        Debug.Log($"ManagedPath: {Paths.ManagedPath}");
        Debug.Log($"ConfigPath: {Paths.ConfigPath}");
        Debug.Log($"BepInExConfigPath: {Paths.BepInExConfigPath}");
        Debug.Log($"CachePath: {Paths.CachePath}");
        Debug.Log($"PatcherPluginPath: {Paths.PatcherPluginPath}");
        Debug.Log($"PluginPath: {Paths.PluginPath}");
        Debug.Log($"ProcessName: {Paths.ProcessName}");
    }

    private void OnDestroy() {
        Harmony.UnpatchAll();
        ResetNetcodeRpcTables.DidReset = false;
    }
}
#endif