#if UNITY_EDITOR
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using BepInEx;
using BepInEx.Bootstrap;
using HarmonyLib;
using Mono.Cecil;
using UnityEngine;

[HarmonyPatch]
public static class FindPluginTypesPatch {
    public static MethodBase TargetMethod() {
        return AccessTools
            .Method(typeof(TypeLoader), nameof(TypeLoader.FindPluginTypes))
            .MakeGenericMethod(typeof(PluginInfo));
    }

    public static Dictionary<string, List<PluginInfo>> Postfix(Dictionary<string, List<PluginInfo>> result) {
        var file = typeof(FindPluginTypesPatch).Module.FullyQualifiedName;
        var assemblyDefinition = AssemblyDefinition.ReadAssembly(file, TypeLoader.ReaderParameters);
        var hasBepinPluginsFunction = AccessTools.Method(typeof(Chainloader), "HasBepinPlugins");

        if (!(bool)hasBepinPluginsFunction.Invoke(null, new object[] { assemblyDefinition })) {
            result[file] = new List<PluginInfo>();
            assemblyDefinition.Dispose();
            Debug.Log("No BepInEx plugins found in Assembly-CSharp!");
        } else {
            var list = assemblyDefinition.MainModule.Types
                .Select(Chainloader.ToPluginInfo)
                .Where(t => t != null)
                .ToList();
            result[file] = list;
            assemblyDefinition.Dispose();
            Debug.Log($"Found {list.Count} BepInEx plugins in Assembly-CSharp!");
        }

        return result;
    }
}
#endif